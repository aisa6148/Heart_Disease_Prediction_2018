heart$num <- ifelse(heart$num > "1", "1",
ifelse(heart$num == "0", "0", NA))
heart <- na.omit(heart)
heart$num <- as.factor(heart$num)
summary(heart$num)
heart
validation_index <- createDataPartition(heart$num, p=0.80, list=FALSE)
test <- heart[-validation_index,]
heart <- heart[validation_index,]
# summarize the class distribution
percentage <- prop.table(table(heart$num)) * 100
cbind(freq=table(heart$num), percentage=percentage)
summary(heart)
a<- data.frame("age"=, "sex"=1, "cp"=1, "trestbps"=145, "chol"=233, "fbs"=1, "restecg"=2, "exang"= 0, "thalach"=150, "oldpeak"=2.3, "slope"=3, "ca"=0, "thal"=6, "num"=0)
logistic <- glm(num ~ ., data = heart,family='binomial')
summary(logistic)
#Predict Output
predicted= predict(logistic, a)
summary(predicted)
predicted
plot(logistic)
if(predicted<0){
display<-"disease"
}else
{
display<-"no disease"
}
display
fit <- rpart(num ~ ., data = heart,method="class")
summary(fit)
fancyRpartPlot(fit)
#Predict Output
predicted= predict(fit,a)
summary(predicted)
if(predicted<0){
display<-"disease"
}else
{
display<-"no disease"
}
display
plot(logistic)
logistic <- glm(num ~ ., data = heart,family='binomial')
library(mice)
library(doParallel)
library(caret)
library(dplyr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(tidyr)
library(ggplot2)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num > "1", "1",
ifelse(heart$num == "0", "0", NA))
heart <- na.omit(heart)
heart$num <- as.factor(heart$num)
summary(heart$num)
heart
validation_index <- createDataPartition(heart$num, p=0.80, list=FALSE)
test <- heart[-validation_index,]
heart <- heart[validation_index,]
# summarize the class distribution
percentage <- prop.table(table(heart$num)) * 100
cbind(freq=table(heart$num), percentage=percentage)
summary(heart)
logistic <- glm(num ~ ., data = heart,family='binomial')
summary(logistic)
plot(logistic)
plot(logistic)
display<-"no disease"
}
display
library(mice)
library(doParallel)
library(caret)
library(dplyr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(tidyr)
library(ggplot2)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num > "1", "1",
ifelse(heart$num == "0", "0", NA))
heart <- na.omit(heart)
heart$num <- as.factor(heart$num)
summary(heart$num)
heart
validation_index <- createDataPartition(heart$num, p=0.80, list=FALSE)
test <- heart[-validation_index,]
heart <- heart[validation_index,]
heart
validation_index <- createDataPartition(heart$num, p=0.70, list=FALSE)
test <- heart[-validation_index,]
heart <- heart[validation_index,]
# summarize the class distribution
percentage <- prop.table(table(heart$num)) * 100
cbind(freq=table(heart$num), percentage=percentage)
summary(heart)
set.seed(10)
RFModel <- randomForest(num ~ .,
data=heart,
importance=TRUE,
ntree=2000)
varImpPlot(RFModel)
library(randomForest)
varImpPlot(RFModel)
RFModel <- randomForest(num ~ .,
data=heart,
importance=TRUE,
ntree=2000)
varImpPlot(RFModel)
plot(logistic)
display<-"no disease"
}
display
varImpPlot(RFModel)
library(caret)
heart_df <- read.csv("heart_tidy.csv", sep = ',', header = FALSE)
#heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart_df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart_df$num <- ifelse(heart_df$num >= "1", "1",
ifelse(heart_df$num == "0", "0", NA))
#heart
#heart <- na.omit(heart)
#heart$num[heart$num > 0] <- 1
#heart$num <- as.factor(heart$num)
#summary(heart$num)
a<- data.frame("age"=63, "sex"=1, "cp"=1, "trestbps"=145, "chol"=233, "fbs"=1, "restecg"=2, "thalach"=150, "exang"= 0, "oldpeak"=2.3, "slope"=3, "ca"=0, "thal"=6, "num"=0)
set.seed(3033)
index <- createDataPartition(heart_df$num, p = 0.7, list = FALSE)
train_data <- heart_df[index, ]
test_data  <- heart_df[-index, ]
test_data
train_data[["num"]] = factor(train_data[["num"]])
#nyNA(heart_df)
#training the model
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(3233)
svm_Linear <- train(num ~., data = train_data, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
test_pred <- predict(svm_Linear,test_data)
test_pred
confusionMatrix(test_pred, test_data$num )
plot(svm_Linear)
#building & tuning of an SVM classifier with different values of C
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
set.seed(3233)
svm_Linear_Grid <- train(num ~., data = train_data, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneGrid = grid,
tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
test_pred_grid <- predict(svm_Linear_Grid, newdata = a)
test_pred_grid
confusionMatrix(test_pred_grid, test_data$num )
#Non-Linear Kernel like Radial Basis Function
set.seed(3233)
svm_Radial <- train(num ~., data = train_data, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Radial
plot(svm_Radial)
test_pred_Radial <- predict(svm_Radial, newdata = a)
confusionMatrix(test_pred_Radial, test_data$num )
#test & tune our classifier with different values of C & sigma
grid_radial <- expand.grid(sigma = c(0,0.01, 0.02, 0.025, 0.03, 0.04,0.05, 0.06, 0.07,0.08, 0.09, 0.1, 0.25, 0.5, 0.75,0.9),C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75,1, 1.5, 2,5))
set.seed(3233)
svm_Radial_Grid <- train(num ~., data = train_data, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneGrid = grid_radial,
tuneLength = 10)
shiny::runApp()
runApp()
library(mice)
library(doParallel)
library(caret)
library(dplyr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(tidyr)
library(ggplot2)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num == "1", "disease",
ifelse(heart$num == "0", "nodisease", NA))
heart <- na.omit(heart)
heart$num[heart$num > 0] <- 1
heart$num <- as.factor(heart$num)
summary(heart$num)
library(ggplot2)
ggplot(heart, aes(x = num, fill =num)) +
geom_bar()
ggplot(heart, aes(x = cp)) +
geom_histogram(bins = 10)
library(tidyr)
gather(heart, x, y, age:thal) %>%
ggplot(aes(x = y, color = num, fill = num)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
# configure multicore
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
library(caret)
set.seed(42)
index <- createDataPartition(heart$num, p = 0.7, list = FALSE)
train_data <- heart[index, ]
test_data  <- heart[-index, ]
library(mice)
library(doParallel)
library(caret)
library(dplyr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(tidyr)
library(ggplot2)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num >= "1", "disease",
ifelse(heart$num == "0", "nodisease", NA))
heart <- na.omit(heart)
heart$num <- as.factor(heart$num)
summary(heart$num)
library(ggplot2)
ggplot(heart, aes(x = num, fill =num)) +
geom_bar()
ggplot(heart, aes(x = cp)) +
geom_histogram(bins = 10)
library(tidyr)
gather(heart, x, y, age:thal) %>%
ggplot(aes(x = y, color = num, fill = num)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
# configure multicore
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
library(caret)
set.seed(42)
index <- createDataPartition(heart$num, p = 0.7, list = FALSE)
train_data <- heart[index, ]
test_data  <- heart[-index, ]
library(dplyr)
rbind(data.frame(group = "train", train_data),
data.frame(group = "test", test_data)) %>%
gather(x, y, age:thal) %>%
ggplot(aes(x = y, color = group, fill = group)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
runApp()
runApp()
runApp()
runApp()
library(e1071)
heart_df <- read.csv("heart_tidy.csv", sep = ',', header = FALSE)
names(heart_df) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart_df$num <- ifelse(heart_df$num >= "1", "1",
ifelse(heart_df$num == "0", "0", NA))
heart_df
set.seed(3033)
library(e1071)
library(caret)
index <- createDataPartition(heart_df$num, p = 0.7, list = FALSE)
train_data <- as.data.frame(heart_df[index, ])
test_data  <- as.data.frame(heart_df[-index, ])
a<- data.frame("age"=37, "sex"=1, "cp"=3, "trestbps"=130, "chol"=250, "fbs"=0, "restecg"=0, "thalach"=187, "exang"= 0, "oldpeak"=3.5, "slope"=3, "ca"=0, "thal"=3, "num"=0)
tprior<-table(train_data$num)
tprior
tprior<-tprior/sum(tprior)
tprior
model<-naiveBayes(as.factor(num)~.,data=train_data)
model
summary(model)
library(e1071)
results<-predict(model,a)
results
test_data
plot(results)
svmPrediction <- predict(model, test_data)
#svmPredictionprob <- predict(model, test_data, type='prob')[2]
cm3 <- confusionMatrix(svmPrediction, test_data[,"num"])
cm3
runApp()
set.seed(42)
model_glm <- caret::train(age ~ .,
data = train_data,
method = "glm",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
savePredictions = TRUE,
verboseIter = FALSE))
model_glm
predictions <- predict(model_glm, test_data)
data.frame(residuals = resid(model_glm),
predictors = model_glm$finalModel$linear.predictors) %>%
ggplot(aes(x = predictors, y = residuals)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(residuals = resid(model_glm),
y = model_glm$finalModel$y) %>%
ggplot(aes(x = y, y = residuals)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$num,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$num,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$num,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
runApp()
heart<- read.csv("copy.csv", sep = ',', header = FALSE)
HeartTestData <- data.frame("Age" = 00, "Sex" = 0, "chesp.pain.type" = 0, "resting.bp" = 0, "cholestrol" = 0, "fasting.blood.sugar" =0, "electrocardiographic" = 0,"maximum.heart.rate" = maxheartrate, "exercise.induced.angina" = 0, "oldpeak" = 0, "slope.of.peak.exercise" = 0, "ca" = 0, "thal" = 0, "num" = 0)
write.csv(HeartTestData, file="hearttestData.csv", row.names = FALSE)
HeartTestData <- data.frame("Age" = 00, "Sex" = 0, "chesp.pain.type" = 0, "resting.bp" = 0, "cholestrol" = 0, "fasting.blood.sugar" =0, "electrocardiographic" = 0,"maximum.heart.rate" = maxheartrate, "exercise.induced.angina" = 0, "oldpeak" = 0, "slope.of.peak.exercise" = 0, "ca" = 0, "thal" = 0, "num" = 0)
write.csv(HeartTestData, file="copy.csv", row.names = FALSE)
HeartTestData <- data.frame("Age" = 00, "Sex" = 0, "chesp.pain.type" = 0, "resting.bp" = 0, "cholestrol" = 0, "fasting.blood.sugar" =0, "electrocardiographic" = 0,"maximum.heart.rate" = 0, "exercise.induced.angina" = 0, "oldpeak" = 0, "slope.of.peak.exercise" = 0, "ca" = 0, "thal" = 0, "num" = 0)
write.csv(HeartTestData, file="copy.csv", row.names = FALSE)
HeartTestData <- data.frame("Age" = 00, "Sex" = 0, "chesp.pain.type" = 0, "resting.bp" = 0, "cholestrol" = 0, "fasting.blood.sugar" =0, "electrocardiographic" = 0,"maximum.heart.rate" = 0, "exercise.induced.angina" = 0, "oldpeak" = 0, "slope.of.peak.exercise" = 0, "ca" = 0, "thal" = 0, "num" = 0)
heart<-write.csv(HeartTestData, file="copy.csv", row.names = FALSE)
heart
heart<-write.csv(HeartTestData, file="copy.csv", row.names = FALSE)
heart<-write.csv(HeartTestData, file="copy.csv", row.names = FALSE)
heart
HeartTestData <- data.frame("Age" = "00", "Sex" = "0", "chest.pain.type" = "0", "resting.bp" = "0", "cholestrol" = "0", "fasting.blood.sugar" ="0", "electrocardiographic" = "0","maximum.heart.rate" = "0", "exercise.induced.angina" = "0", "oldpeak" = "0", "slope.of.peak.exercise" = "0", "ca" = "0", "thal" = "0", "num" = "0")
heart<-write.csv(HeartTestData, file="copy.csv", row.names = FALSE, append= TRUE)
heart
HeartTestData <- data.frame("Age" = "00", "Sex" = "0", "chest.pain.type" = "0", "resting.bp" = "0", "cholestrol" = "0", "fasting.blood.sugar" ="0", "electrocardiographic" = "0","maximum.heart.rate" = "0", "exercise.induced.angina" = "0", "oldpeak" = "0", "slope.of.peak.exercise" = "0", "ca" = "0", "thal" = "0", "num" = "0")
write.table(HeartTestData, "copy.csv", sep = ",", col.names = T, append = T)
HeartTestData <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0)
write.table(HeartTestData, "copy.csv", sep = ",", col.names = T, append = T)
HeartTestData <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0)
write.table( HeartTestData,
file="./copy.csv",
append = T,
sep=',',
row.names=F,
col.names=F )
HeartTestData <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0)
write.table( HeartTestData,
file="./heary_tidy.csv",
append = T,
sep=',',
row.names=F,
col.names=F )
write.table( HeartTestData,
file="./copy.csv",
append = T,
sep=',',
row.names=F,
col.names=F )
HeartTestData <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0)
write.table( HeartTestData,
file="./copy.csv",
append = T,
sep=',',
row.names=F,
col.names=F )
HeartTestData <- data.frame(0,0,0,0,0,0,0,0,0,0,0,0,0)
write.table( HeartTestData,
file="./copy.csv",
append = T,
sep=',',
row.names=F,
col.names=F )
data<-read.csv("./yo.csv")
data
data<-read.csv("yo.csv")
data
data<-read.csv("yo.csv", sep = ',', header = FALSE)
data
data<-read.csv("yo.csv", sep = ',', header = FALSE)
data<-read.csv("yo.csv", sep = ',', header = FALSE)
shiny::runApp()
library(mice)
library(doParallel)
library(caret)
library(dplyr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(tidyr)
library(ggplot2)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num == "1", "disease",
ifelse(heart$num == "0", "nodisease", NA))
heart <- na.omit(heart)
heart$num[heart$num > 0] <- 1
heart$num <- as.factor(heart$num)
summary(heart$num)
library(ggplot2)
ggplot(heart, aes(x = num, fill =num)) +
geom_bar()
ggplot(heart, aes(x = cp)) +
geom_histogram(bins = 10)
library(tidyr)
gather(heart, x, y, age:thal) %>%
ggplot(aes(x = y, color = num, fill = num)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
heart<- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
names(heart) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg", "thalach",
"exang", "oldpeak","slope", "ca", "thal", "num")
heart$num <- ifelse(heart$num >= "1", "disease",
ifelse(heart$num == "0", "nodisease", NA))
heart <- na.omit(heart)
heart$num <- as.factor(heart$num)
summary(heart$num)
gather(heart, x, y, age:thal) %>%
ggplot(aes(x = y, color = num, fill = num)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
# configure multicore
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
library(caret)
set.seed(42)
index <- createDataPartition(heart$num, p = 0.7, list = FALSE)
train_data <- heart[index, ]
test_data  <- heart[-index, ]
library(dplyr)
rbind(data.frame(group = "train", train_data),
data.frame(group = "test", test_data)) %>%
gather(x, y, age:thal) %>%
ggplot(aes(x = y, color = group, fill = group)) +
geom_density(alpha = 0.3) +
facet_wrap( ~ x, scales = "free", ncol = 3)
set.seed(42)
model_glm <- caret::train(age ~ .,
data = train_data,
method = "glm",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
savePredictions = TRUE,
verboseIter = FALSE))
model_glm
predictions <- predict(model_glm, test_data)
data.frame(residuals = resid(model_glm),
predictors = model_glm$finalModel$linear.predictors) %>%
ggplot(aes(x = predictors, y = residuals)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(residuals = resid(model_glm),
y = model_glm$finalModel$y) %>%
ggplot(aes(x = y, y = residuals)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$num,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(residuals = predictions,
y = test_data$num) %>%
ggplot(aes(x = y, y = residuals)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$age,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$num,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$cp,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
data.frame(actual = test_data$age,
predicted = predictions) %>%
ggplot(aes(x = actual, y = predicted)) +
geom_jitter() +
geom_smooth(method = "lm")
runApp()
shiny::runApp()
